load("//bazel/js:index.bzl", "ts_library", "web_module")
load("@npm//jest:index.bzl", "jest_test")
load("@npm//@bazel/rollup:index.bzl", "rollup_bundle")

_DEPS = [
    "//npm:react",
    "@npm//tslib",
]

ts_library(
    name = "compile",
    srcs = glob(
        [
            "*.ts",
            "*.tsx",
        ],
        exclude = ["*.test.*"],
    ),
    tsconfig = "//:tsconfig.json",
    deps = _DEPS,
)

ts_library(
    name = "test_compile",
    srcs = glob(["*.test.*"]),
    tsconfig = "//:tsconfig.json",
    deps = [
        "compile",
        "//npm:react",
        "@npm//@testing-library/react",
        "@npm//@types/jest",
        "@npm//@types/node",
        "@npm//tslib",
    ],
)

jest_test(
    name = "test",
    args = [
        "--config $(execpath //:jest.config.js)",
        "--no-cache",
        "--no-watchman",
        "--ci",
        "--runInBand",
    ],
    data = [
        ":test_compile",
        "//:jest.config.js",
    ],
    env = {
        "JEST_ROOT_DIR": package_name(),
        "JEST_TEST_ENVIRONMENT": "jsdom",
    },
    link_workspace_root = True,
)

filegroup(
    name = "compile__esm",
    srcs = [":compile"],
    output_group = "es6_sources",
)

rollup_bundle(
    name = "bundle",
    config_file = "//:rollup.config.js",
    entry_points = {
        "index.ts": "index",
    },
    env = {
        "IMPORTMAP_MODULE_NAME": package_name(),
        "IMPORTMAP_OUTPUT_DIR": "bundle",
    },
    format = "system",
    output_dir = True,
    sourcemap = "true",
    deps = [
        ":compile__esm",
        "@npm//@rollup/plugin-node-resolve",
        "@npm//@rollup/plugin-replace",
        "@npm//rollup-plugin-sourcemaps",
    ],
)

web_module(
    name = "button",
    assets = ["bundle"],
    copy_manifest_file = "bundle/importmap.json",
)
